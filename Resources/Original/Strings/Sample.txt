Dictionary *language = Dictionary::createWithContentsOfFile("ch.plist");

	String* str = (String*)language->objectForKey("004");
	std::string localizedString(str->getCString());

	String* item = (String*)language->objectForKey("005");
	
	std::string filledString = StringUtils::format(localizedString.c_str(), item->getCString());
	
	
	int wholesize = filledString.size();
	char* wholeLine = new char[wholesize + 1];
	strcpy(wholeLine, filledString.c_str());
	char * end = wholeLine + wholesize;

	int CHAR_PER_LINE = 11;
	int LINE_PER_SCREEN = 3;

	int charCount = 0;
	char* w = wholeLine;
	char* last = wholeLine;
	Vector<String *> sentenceList;
	while (w <= end)
	{
		if (w == end)
		{
			break;
		}
		
		charCount++;
		utf8::next(w, end);
		
		if (*w == '#' || charCount >= CHAR_PER_LINE || w >= end)
		{
			cocos2d::log("Split line.");

			int charsize = w - last;
			

			char * currentLine = new char[charsize + 1];
			strncpy(currentLine, last, charsize);
			currentLine[charsize] = '\0';

			std::string result(currentLine);
			sentenceList.pushBack(new String(currentLine));

			last = w;
			charCount = 0;
			if (*w == '#')
			{
				last++;
			}
		}
	}
	
	for (int i = 0; i < sentenceList.size(); i++)
	{
		String *sentence = sentenceList.at(i);
		auto label = Label::createWithTTF(sentence->getCString(), "fonts/mini_black.ttf", 24);

		label->setColor(Color3B(255, 0, 0));
		label->setPosition(Vec2(origin.x + visibleSize.width / 2,
			origin.y + visibleSize.height - label->getContentSize().height - i * 30));

		this->addChild(label, 1);
	}

